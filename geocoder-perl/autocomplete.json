#!/usr/bin/perl

package AutoComplete;

use strict;
use warnings;
use CGI;

use lib '/var/www/okf/data/gis/1';
use vars qw( @ISA );
require JSONAPI;
@ISA = qw( JSONAPI );

use MIME::Base64 qw(encode_base64url);

use constant INPUT_PROFILE => {
    optional => [qw( input address input language query components )],
    # filters => [qw( trim )],
    constraints => {
    },
};

use constant FINLAND_NAMES => {
    'fin' => 'Suomi',
    'eng' => 'Finland',
    'swe' => 'Finland',
    'sme' => 'Suopma',
    'smn' => 'Suopma',
};

AutoComplete->instance->render(new CGI, shift);

sub renderPage {
    my $self = shift;
    my $cgi = shift;
    my $r = shift;
    
    my $address = $self->{input}{address};
    if (!defined $address) {
	$address = $self->{input}{input};
    }
    if (!defined $address) {
	$address = $self->{input}{query};
    }
    my $language = $self->{input}{language};
    my $db = $self->getMtkDB3;
    my $components_text = $self->{input}{components};
    my %components;
    if (defined $components_text) {
	for (split /\|/, $components_text) {
	    my ($key, $value) = split ':';
	    $components{$key} = [ split ',', $value ];
	}
    }

    if (defined $address) {
	$address =~ s/,//g;

	my @parts = split / +/, $address;

	print STDERR "parts = " . (join ', ', @parts) . "\n";

	my ($area_name, $postcode, $number);
	pop @parts if @parts && ($parts[-1] =~ /^finland$/i || $parts[-1] =~ /^suomi$/i || $parts[-1] =~ /^suopma$/);
	$area_name = pop @parts if @parts > 1 && $parts[-1] !~ /^\d+$/;
	$postcode = pop @parts if @parts && $parts[-1] =~ /^\d{5}$/;
	$number = pop @parts if @parts && $parts[-1] =~ /^\d+$/;
	
	my $street = join ' ', @parts;
	
	# my ($kunta_id, $kunta);
	# if (!$postcode && defined $area_name) {
	#     ($kunta_id, $kunta) = $self->getKuntaByName($area_name);
	# }

	printf STDERR "search for address: street = %s, n = %s, area = %s\n", defined $street ? $street : 'n/a', defined $number ? $number : 'n/a', defined $area_name ? $area_name : 'n/a';

	my %r;
	my $admin_areas = $components{administrative_area};
 
	my @data = $self->loadAddressData($street, $area_name, $postcode, $admin_areas);
	if (!@data && defined $area_name && !defined $number && !defined $postcode) {
	    $street .= ' ' . $area_name;
	    $area_name = undef;
	    @data = $self->loadAddressData($street, $area_name, $postcode, $admin_areas);
	}
	
	print STDERR "rows = " . (scalar @data) . "\n";
	    
	my %best;
	
	for my $o (@data) {
	    my $n = $o->{numbering};
	    
	    my ($selected, $is_best, $match, $is_inside, $difference);
	    
	    my $key = join ' ', grep { defined $_ } ($o->{name}, $o->{kunta});
	    my $best_data = $best{$key};

	    if ($number) {
		my $rem = $number % 2;
		for my $s (values %$n) {
		    if ($s->[0] && $s->[1] && $s->[0] <= $s->[1] && $rem == $s->[0] % 2 && $rem == $s->[1] % 2) {
			$selected = $s;
			last;
		    }
		}
	    }
	    
	    if ($selected) {
		if ($number < $selected->[0]) {
		    $match = $selected->[0];
		} elsif ($number > $selected->[1]) {
		    $match = $selected->[1];
		} else {
		    $match = $number;
		}
		$difference = $match - $number;
		$is_inside = 1 if !$difference;
		if ($is_inside || !$best_data || (!$best_data->{is_inside} && (!defined $best_data->{difference} || abs($difference) < abs($best_data->{difference})))) {
		    $is_best = 1;
		}
	    } else {
		for my $s (values %$n) {
		    if ($s->[0] && (!$match || $s->[0] < $match)) {
			$selected = $s;
			$match = $s->[0];
		    }
		}
		if (!$best_data || (!defined $best_data->{difference} && $match && !$best_data->{is_inside} && (!$best_data->{match} || $match < $best_data->{match}))) {
		    $is_best = 1;
		}
	    }
	    if ($is_best || !$best_data) {
		$best_data = $best{$key} = {
		    o => $o,
		    is_inside => $is_inside,
		    match => $match,
		    selected => $selected,
		    difference => $difference,
		    kunta_nro => $o->{kunta_nro},
		};
		# last if $best_data->{is_inside};
	    }
	}
	my @predictions;
	for my $best (values %best) {
	    my $o = $best->{o};
	    my $g = $o->{g};
	    my $id = $o->{id};

	    my $street_name = $o->{name};
	    my $postcode;
	    my $post_area;
	    my $postal_town;
	    my $admin_area;
	    my $has_postcode;
	    if ($o->{postcode_left}) { # FIXME: need to consider the other postcode too
		$postcode = $o->{postcode_left};
		$postal_town = $o->{postname_left};
		$post_area = join ' ', grep { defined $_ } ($postcode, $o->{postname_left});
		$has_postcode = 1;
	    }
	    if (defined $o->{kunta}) {
		$admin_area = $o->{kunta};
	    }
	    	    
	    my $country_short = 'FI';
	    my $country;
	    if ($country_short eq 'FI') {
		# $country = FINLAND_NAMES->{$o->{lang}} if defined $o->{lang};
		$country = FINLAND_NAMES->{$language} if !defined $country && defined $language;
		$country = 'Finland' if !defined $country;
	    }
	    
	    my @terms;
	    my @address_components;
	    push @address_components, { long_name => $best->{match}, short_name => $best->{match}, types => [ 'street_number' ] } if defined $best->{match};
	    push @address_components, { long_name => $street_name, short_name => $street_name, types => [ 'route' ] };
	    push @address_components, { long_name => $admin_area, short_name => $admin_area, types => [ 'administrative_area_level_3', 'political' ] } if defined $admin_area;
	    push @address_components, { long_name => $postcode, short_name => $postcode, types => [ 'postal_code' ] } if defined $postcode;
	    
	    push @address_components, { long_name => $postal_town, short_name => $postal_town, types => [ 'postal_town' ] } if defined $postal_town;
	    push @address_components, { long_name => $country, short_name => $country_short, types => [ 'country', 'political' ] }; 
	    
	    push @terms, $street_name . (defined $best->{match} ? ' ' . $best->{match} : '');
	    push @terms, $post_area if defined $post_area;
	    push @terms, $admin_area if defined $admin_area;
	    push @terms, $country;
	    
	    my $description = '';
	    my @terms2;
	    for my $term (@terms) {
		push @terms2, { value => $term, offset => length $description };
		$description .= ', ' if length $description;
		$description .= $term;
	    }
	    
	    my $reference = pack 'N', $id;
	    $reference .= pack 'N', 1;
	    $reference .= pack 'N', $best->{match} if defined $best->{match};
	    
	    push @predictions, {
		id => $id,
		description => $description,
		matched_substrings => [ ],
		reference => encode_base64url($reference),
		terms => \@terms2,
		types => [ 'geocode', 'route' ],
		address_components => \@address_components,
	    };		    
	}
	
	$r{predictions} = \@predictions;
	if (@predictions) {
	    $r{status} = 'OK';
	} else {
	    $r{status} = 'ZERO_RESULTS';
	}
	$self->sendData($cgi, $r, \%r);
    } else {
	my %r = ( status => 'INVALID_REQUEST', predictions => [] );
	$self->sendData($cgi, $r, \%r);
    }

}

sub loadAddressData {
    my $self = shift;
    my ($street, $area_name, $postcode, $admin_areas) = @_;

    if (defined $area_name) {
	return $self->fetchData('LINESTRING', q{ SELECT id, postcode_left, postcode_right, postname_left, postname_right, name, lang, kunta_nro, kunta, fromleft, toleft, fromright, toright, AsText(g) AS g FROM geocoding WHERE kunta LIKE ? AND name = ? LIMIT 10000 }, $area_name . '%', $street);
    } elsif ($postcode) {
	return $self->fetchData('LINESTRING', q{ SELECT id, postcode_left, postcode_right, postname_left, postname_right, name, lang, kunta_nro, kunta, fromleft, toleft, fromright, toright, AsText(g) AS g FROM geocoding WHERE (postcode_left = ? OR postcode_right = ?) AND name LIKE ? LIMIT 10000 }, $postcode, $postcode, $street . '%');
    } elsif ($admin_areas) {
	return $self->fetchData('LINESTRING', q{ SELECT id, postcode_left, postcode_right, postname_left, postname_right, name, lang, kunta_nro, kunta, fromleft, toleft, fromright, toright, AsText(g) AS g FROM geocoding WHERE name LIKE ? AND kunta IN ( } . (join ', ', map { '?' } @$admin_areas) . q{ ) LIMIT 10000 }, $street . '%', @$admin_areas) if @$admin_areas;
    } else {
	return $self->fetchData('LINESTRING', q{ SELECT id, postcode_left, postcode_right, postname_left, postname_right, name, lang, kunta_nro, kunta, fromleft, toleft, fromright, toright, AsText(g) AS g FROM geocoding WHERE name LIKE ? LIMIT 10000 }, $street . '%');
    }

}
